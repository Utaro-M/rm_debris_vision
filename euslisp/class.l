(defclass my-coords
  :super propertied-object
  :slots (rarm-coords larm-coords rleg-coords lleg-coords rleg-new-coords lleg-new-coords rarm-target-coords larm-target-coords pre-angle-vector)
  )

(defmethod my-coords
  (:init () ;;rleg-support-polygon lleg-support-polygon)
         (progn
           (send self :set-rarm-coords (send *robot* :rarm :end-coords :copy-worldcoords))
           (send self :set-larm-coords (send *robot* :larm :end-coords :copy-worldcoords))
           (send self :set-rleg-coords (send *robot* :rleg :end-coords :copy-worldcoords))
           (send self :set-lleg-coords (send *robot* :lleg :end-coords :copy-worldcoords))
           (send self :set-rleg-new-coords (send *robot* :rleg :end-coords :copy-worldcoords))
           (send self :set-lleg-new-coords (send *robot* :lleg :end-coords :copy-worldcoords))
           (send self :set-pre-angle-vector (send *robot* :angle-vector))
           (send self :set-latest-angle-vector (send *robot* :angle-vector))
           )
         self)
  (:set-rarm-coords (val)             (setq rarm-coords val))
  (:set-larm-coords (val)		      (setq larm-coords val))
  (:set-rleg-coords (val)		      (setq rleg-coords val))
  (:set-lleg-coords (val)		      (setq lleg-coords val))
  (:set-rleg-new-coords (val)		  (setq rleg-new-coords val))
  (:set-lleg-new-coords (val)		  (setq lleg-new-coords val))
  (:set-rarm-target-coords (val)      (setq rarm-target-coords val))
  (:set-larm-target-coords (val)      (setq larm-target-coords val))
  (:set-pre-angle-vector (val)        (setq pre-angle-vector val))
  (:set-latest-angle-vector (val)     (setq latest-angle-vector val))
  
  (:get-rarm-coords ()                 rarm-coords)
  (:get-larm-coords ()                 larm-coords)
  (:get-rleg-coords ()                 rleg-coords)
  (:get-lleg-coords ()		           lleg-coords)
  (:get-lleg-new-coords ()			   lleg-new-coords)
  (:get-rleg-new-coords ()			   rleg-new-coords)
  (:get-rarm-target-coords ()          rarm-target-coords)
  (:get-larm-target-coords ()          larm-target-coords)
  (:get-pre-angle-vector ()            pre-angle-vector)
  (:get-latest-angle-vector ()         latest-angle-vector)
  )

(defclass my-ik-param
  :super propertied-object
  :slots (only-kinematics? optimize-torque? fix-contact? avoid-collision? apply-external-force? wait? rleg-pos-shift lleg-pos-shift external-wrench-list set-unique-kin-scale? fix-hand?  send? reset? kin-scale-list external-coords-list rleg-force-offset lleg-force-offset kin-task-value-thre eom-trans-task-value-thre eom-rot-task-value-thre obj force-move)
  )

(defmethod my-ik-param
  (:init ()
         (progn
           (send self :set-only-kinematics? nil)
           (send self :set-optimize-torque? nil)
           (send self :set-fix-contact? nil)
           (send self :set-avoid-collision? t)
           (send self :set-apply-external-force? t)
           (send self :set-wait? t)  
           (send self :set-rleg-pos-shift #f(80 -20 0))
           (send self :set-lleg-pos-shift #f(80 20 0))
           ;; (send self :set-external-wrench-list (list
           ;;                                      (float-vector 0 0 400 0 0 0)
           ;;                                      (float-vector 0 0 400 0 0 0)
           ;;                                      (float-vector 0 0 -80 0 0 0)
           ;;                                      (float-vector 0 0 -80 0 0 0)))
           (send self :set-rarm-wrench (float-vector 0 0 -80 0 0 0))
           (send self :set-larm-wrench (float-vector 0 0 -80 0 0 0))
           (send self :set-rleg-wrench-offset (float-vector 0 0 530 0 0 0))
           (send self :set-lleg-wrench-offset (float-vector 0 0 530 0 0 0))
           ;; (send self :set-rleg-wrench-offset (float-vector 0 0 0 0 0 0))
           ;; (send self :set-lleg-wrench-offset (float-vector 0 0 0 0 0 0))  
           
           (send self :set-rleg-wrench rleg-wrench-offset)
           (send self :set-lleg-wrench lleg-wrench-offset)
           (send self :set-eom-rot-task-value-thre 0.01)
           ;; (send self :set-eom-trans-task-value-thre 0.01)
	   (send self :set-eom-trans-task-value-thre 10)
           (send self :set-kin-task-value-thre 0.005)
           (send self :set-set-unique-kin-scale? nil)
           (send self :set-fix-hand? nil)
           (send self :set-send? t)
           (send self :set-reset? t)
           (send self :set-kin-scale-list (list 1.0
                                                1.0
                                                (list 1 1 1 1 1 0.2)
                                                0.0))
           (send self :set-external-coords-list (if (boundp '*robot-env*)
                                                    (list
                                                     (send *robot-env* :robot :get :rleg-contact-coords)
                                                     (send *robot-env* :robot :get :lleg-contact-coords)
                                                     (send *robot-env* :robot :get :rarm-contact-coords)
                                                     (send *robot-env* :robot :get :larm-contact-coords))
                                                  (list
                                                   (send *robot* :rleg :end-coords)
                                                   (send *robot* :lleg :end-coords)
                                                   (send *robot* :rarm :end-coords)
                                                   (send *robot* :larm :end-coords))))
	   (send self :set-force-move     nil)
           )
         self)

  
  (:set-only-kinematics? (val)                  (setq only-kinematics? val))
  (:set-optimize-torque? (val)                  (setq optimize-torque? val))
  (:set-fix-contact? (val)                      (setq fix-contact? val))
  (:set-avoid-collision? (val)                  (setq avoid-collision? val))
  (:set-apply-external-force? (val)             (setq apply-external-force? val))
  (:set-wait? (val)                             (setq wait? val))
  (:set-rleg-pos-shift(val)                     (setq rleg-pos-shift val))
  (:set-lleg-pos-shift(val)                     (setq lleg-pos-shift val))
  (:set-external-wrench-list(val)                (setq external-wrench-list val))
  (:set-set-unique-kin-scale?(val)              (setq set-unique-kin-scale? val))
  (:set-fix-contact?(val)                       (setq fix-contact? val))
  (:set-fix-hand?(val)                          (setq fix-hand? val))
  (:set-send?(val)                              (setq send? val))
  (:set-reset?(val)                             (setq reset? val))
  (:set-kin-scale-list (val)                    (setq kin-scale-list val))
  (:set-external-coords-list(val)               (setq external-coords-list val))
  (:set-rarm-wrench(val)                         (setq rarm-wrench val))
  (:set-larm-wrench(val)                         (setq larm-wrench val))
  (:set-rleg-wrench(val)                         (setq lleg-wrench val))
  (:set-lleg-wrench(val)                         (setq rleg-wrench val))
  (:set-rleg-wrench-offset(val)                  (setq rleg-wrench-offset val))
  (:set-lleg-wrench-offset(val)                  (setq lleg-wrench-offset val))
  (:set-kin-task-value-thre (val)               (setq kin-task-value-thre  val))
  (:set-eom-trans-task-value-thre (val)         (setq eom-trans-task-value-thre  val))
  (:set-eom-rot-task-value-thre (val)           (setq eom-rot-task-value-thre val))
  (:set-object(val)                             (setq obj val))
  (:set-force-move(val)                         (setq force-move val))
  
  (:get-only-kinematics? ()                      only-kinematics?)
  (:get-optimize-torque? ()                      optimize-torque?)
  (:get-fix-contact? ()                          fix-contact? )
  (:get-avoid-collision? ()                      avoid-collision? )
  (:get-apply-external-force? ()                 apply-external-force? )
  (:get-wait? ()                                 wait? )
  (:get-rleg-pos-shift()                         rleg-pos-shift )
  (:get-lleg-pos-shift()                         lleg-pos-shift )
  (:get-external-wrench-list()                    external-wrench-list )
  (:get-set-unique-kin-scale?()                  set-unique-kin-scale? )
  (:get-fix-contact?()                           fix-contact? )
  (:get-fix-hand?()                              fix-hand? )
  (:get-send?()                                  send? )
  (:get-reset?()                                 reset? )
  (:get-kin-scale-list ()                        kin-scale-list)
  (:get-external-coords-list()                   external-coords-list)
  (:get-rarm-wrench()                             rarm-wrench)
  (:get-larm-wrench()                             larm-wrench)
  (:get-lleg-wrench()                             lleg-wrench)
  (:get-rleg-wrench()                             rleg-wrench)
  (:get-rleg-wrench-offset()                      rleg-wrench-offset)
  (:get-lleg-wrench-offset()                      lleg-wrench-offset)
  (:get-eom-trans-task-value-thre ()             eom-trans-task-value-thre)
  (:get-eom-rot-task-value-thre ()               eom-rot-task-value-thre)
  (:get-kin-task-value-thre ()                   kin-task-value-thre)
  (:get-object()                                 obj)
  (:get-force-move(val)                          force-move )
  )

(defclass poses
  :super propertied-object
  :slots (fin-pose-ri fin-pose-robot )
  )
(defmethod poses
  (:init (pose-robot pose-ri)
         (send self :set-fin-pose-robot pose-robot)
         (send self :set-fin-pose-ri pose-ri)
         self
         )
  (:set-fin-pose-ri (val)
                    (setq fin-pose-ri val))
  (:set-fin-pose-robot (val)
                 (setq fin-pose-robot val))  
  (:get-fin-pose-ri ()
                    fin-pose-ri )
  (:get-fin-pose-robot ()
                    fin-pose-robot )
    
  )

(defclass point-num-save
  :super propertied-object
  :slots (larm-points-num rarm-points-num)
  )
(defmethod point-num-save 
  (:init (larm-points-num-init rarm-points-num-init)
         (send self :set-larm-points-num larm-points-num-init)
         (send self :set-rarm-points-num rarm-points-num-init)
         self
         )
  (:set-larm-points-num (val)
                        (setq larm-points-num val))
  (:set-rarm-points-num (val)
                    (setq rarm-points-num val))      
  )

;; (setq *poses* (instance poses :init
;;                        (send *robot* :angle-vector)
;;                        (send *ri* :state :angle-vector)))
;; (setq *coords* (instance my-coords :init
;;                        (copy-object (send *robot* :rarm :end-coords :copy-worldcoords))
;;                        (copy-object (send *robot* :larm :end-coords :copy-worldcoords))
;;                        (copy-object (send *robot* :rleg :end-coords :copy-worldcoords))
;;                        (copy-object (send *robot* :lleg :end-coords :copy-worldcoords))
;;                        #f(0 0 700)
;;                        ))

;; (setq *poses* (instance poses :init
;;                        (send *robot* :angle-vector)
;;                        (send *ri* :state :angle-vector)))
